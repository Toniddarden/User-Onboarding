{"ast":null,"code":"import _slicedToArray from \"/Users/tonidarden/github/git/advanced-form-management-user-onboarding/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tonidarden/github/git/advanced-form-management-user-onboarding/src/components/UserForms.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { withFormik, Form, Field, validationSchema } from \"formik\";\nimport * as Yup from \"yup\";\nimport Axios from \"axios\"; // const UserForms = props => {\n//   const [user, setUser] = useState([]);\n//   useEffect(() => {\n//     if (props.status) {\n//       setUser([...user, props.status]);\n//     }\n//   }, [props.status]);\n//   //form layout\n//   return (\n//     <div className=\"user-form\">\n//       <Form> On Boarding Form\n//         <Field type=\"text\" name=\"name\" placeholder=\"Name\" />\n//         {props.touched.name && props.errors.name && (\n//           <p className=\"error\">{props.errors.name}</p>\n//         )}\n//         <Field type=\"text\" name=\"email\" placeholder=\"Email Address\" />\n//         {props.touched.email && props.errors.email && (\n//           <p className=\"error\">{props.errors.email}</p>\n//         )}\n//         <Field type=\"text\" name=\"password\" placeholder=\"New Password\" />\n//         {props.touched.password && props.errors.password && (\n//           <p className=\"error\">{props.errors.password}</p>\n//         )}\n//         <Field component=\"select\" name=\"region\" className=\"sumbit-select\">\n//           <option>Select Region</option>\n//           <option value=\"eastcoast\">East Coast</option>\n//           <option value=\"westcoast\">West Coast</option>\n//           <option value=\"midwest\">Mid-West</option>\n//           <option value=\"south\">South</option>\n//         </Field>\n//         <label className=\"checkbox-container\">\n//           <Field type=\"checkbox\" name=\"terms\" checked={props.values.terms} />\n//           Terms of Service\n//           <span className=\"checkmark\" />\n//         </label>\n//         <Field\n//           component=\"textarea\"\n//           type=\"text\"\n//           name=\"medical\"\n//           placeholder='Add any medical conditions'\n//           checked={props.values.medical}\n//         />\n//         <button type=\"submit\">Submit!</button>\n//       </Form>\n//       {user.map(user => (\n//         <ul key={user.id}>\n//           <li>Name: {user.name}</li>\n//           <li>Email: {user.email}</li>\n//           <li>New Password: {user.password}</li>\n//         </ul>\n//       ))}\n//     </div>\n//   );\n// };\n// // a component is a function that takes a prop param\n// // and returns JSX\n// // a HOC is a function that takes a component function as a param\n// // and returns a new component function\n// const mappingProps = props => {\n//   console.log(props);\n//   const userObjects = {\n//     name: props.name || \"\",\n//     email: props.email || \"\",\n//     password: props.password || \"\",\n//     terms: props.terms || true,\n//     medical: props.medical || \"\"\n//   };\n//   return userObjects;\n// };\n// const handleSubmit = (values, { setStatus }) => {\n//   console.log(\"submit test\");\n//   Axios.post(\"https://reqres.in/api/users/\", values)\n//     .then(res => {\n//       console.log(res);\n//       setStatus(res.data);\n//     })\n//     .catch(err => console.log(err));\n// };\n// // const yupSchema = Yup.object().shape({\n// //   name: Yup.string().requried(\"Please enter your name\"),\n// //   email: Yup.string().requried(\"Please enter your email\"),\n// //   password: Yup.string().requried(\"Please enter your password\")\n// // });\n// // const yupSchema = Yup.object().shape({\n// //   users: Yup.array()\n// //     .of(\n// //       Yup.object().shape({\n// //         name: Yup.string().requried(\"Please enter your name\"),\n// //         email: Yup.string().requried(\"Please enter your email\"),\n// //         password: Yup.string().requried(\"Please enter your password\"), // these constraints take precedence\n// //       })\n// //     )\n// // });\n// const formikObj = {\n//   mappedProps: mappingProps,\n//   handledSubmit: handleSubmit,\n//   // validationSchema: yupSchema\n// };\n// const FinalFormHOC = withFormik(formikObj);\n// const FinalUserForm = FinalFormHOC(UserForms);\n// export default FinalUserForm;\n//deleteeeeeeeeeeeeeee below \n\nconst UserForms = props => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        animal = _useState2[0],\n        setAnimal = _useState2[1];\n\n  useEffect(() => {\n    if (props.status) {\n      setAnimal([...animal, props.status]);\n    }\n\n    [animal];\n  }); // const handleChange = event => {\n  //   setAnimal({ ...animal, [event.target.name]: event.target.value });\n  // };\n  // const handleSubmit = event => {\n  //   event.preventDefault();\n  //   console.log(animal.species);\n  // };\n  //<Field /> subs for input\n  //Forms takes care of value and onChange key/values\n  // value={props.values.species}\n  // onChange={props.handleChange}\n\n  return React.createElement(\"div\", {\n    className: \"animal-form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, \"Species:\", React.createElement(Field, {\n    type: \"text\",\n    name: \"species\",\n    placeholder: \"species\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }), props.touched.species && props.errors.species && React.createElement(\"p\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, props.error.species), React.createElement(Field, {\n    type: \"text\",\n    name: \"size\",\n    placeholder: \"size\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }), props.touched.size && props.errors.size && React.createElement(\"p\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, props.error.size), React.createElement(Field, {\n    component: \"select\",\n    name: \"diet\",\n    className: \"food-select\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, \"Please Submit\"), React.createElement(\"option\", {\n    value: \"herbivore\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, \"herbivore\"), React.createElement(\"option\", {\n    value: \"carnivore\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, \"carnivore\"), React.createElement(\"option\", {\n    value: \"omnivore\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, \"omnivore\")), React.createElement(\"label\", {\n    className: \"checkbox-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, React.createElement(Field, {\n    type: \"checkbox\",\n    name: \"vaccinations\",\n    checked: props.values.vaccinations,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }), \"vaccinations\", React.createElement(\"span\", {\n    className: \"checkmark\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  })), React.createElement(Field, {\n    component: \"textarea\",\n    type: \"text\",\n    name: \"notes\",\n    placeholder: \"notes\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"sumbit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, \"Submit!\")), animal.map(animal => {\n    React.createElement(\"ul\", {\n      key: animal.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \"Species: \", animal.species), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \"size: \", animal.size), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"Diet: \", animal.diet));\n  }));\n};\n\nconst myMapPropsToValues = props => {\n  const returnObj = {\n    species: props.species || \"\",\n    //must match value={props.values. SPECIES} from input^\n    size: props.size || \"\",\n    diet: props.diet || \"\",\n    vaccinations: props.vaccinations || true,\n    notes: props.notes || \"\"\n  };\n  return returnObj;\n}; //works with <Form /> so you dont need the above handleSubmit function ^^\n// Axios call from the server\n\n\nconst myHandleSubmit = (values, {\n  setStatus\n}) => {\n  console.log(\"sumbit pressed ...sending...\");\n  Axios.post(\"https://reqres.in/api/users/\", values).then(res => {\n    console.log(res);\n    setStatus(res.data);\n  }).catch(err => console.log(err));\n};\n\nconst yupSchema = Yup.object().shape({\n  species: Yup.string().required(\"please type a species\"),\n  size: Yup.string().required(\"please type a size\")\n});\nconst formikObj = {\n  mapPropsToValues: myMapPropsToValues,\n  handleSubmit: myHandleSubmit,\n  validationSchema: yupSchema\n};\nconst EnhancedFormHOC = withFormik(formikObj); // the component being passed must already be declared ie.(UserForms)\n\nconst FormikEnhancedAnimalForm = EnhancedFormHOC(UserForms);\nexport default FormikEnhancedAnimalForm;","map":{"version":3,"sources":["/Users/tonidarden/github/git/advanced-form-management-user-onboarding/src/components/UserForms.js"],"names":["React","useState","useEffect","withFormik","Form","Field","validationSchema","Yup","Axios","UserForms","props","animal","setAnimal","status","touched","species","errors","error","size","values","vaccinations","map","id","diet","myMapPropsToValues","returnObj","notes","myHandleSubmit","setStatus","console","log","post","then","res","data","catch","err","yupSchema","object","shape","string","required","formikObj","mapPropsToValues","handleSubmit","EnhancedFormHOC","FormikEnhancedAnimalForm"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { withFormik, Form, Field, validationSchema } from \"formik\";\nimport * as Yup from \"yup\";\nimport Axios from \"axios\";\n\n// const UserForms = props => {\n//   const [user, setUser] = useState([]);\n\n//   useEffect(() => {\n//     if (props.status) {\n//       setUser([...user, props.status]);\n//     }\n    \n//   }, [props.status]);\n\n//   //form layout\n\n//   return (\n//     <div className=\"user-form\">\n//       <Form> On Boarding Form\n//         <Field type=\"text\" name=\"name\" placeholder=\"Name\" />\n//         {props.touched.name && props.errors.name && (\n//           <p className=\"error\">{props.errors.name}</p>\n//         )}\n//         <Field type=\"text\" name=\"email\" placeholder=\"Email Address\" />\n//         {props.touched.email && props.errors.email && (\n//           <p className=\"error\">{props.errors.email}</p>\n//         )}\n//         <Field type=\"text\" name=\"password\" placeholder=\"New Password\" />\n//         {props.touched.password && props.errors.password && (\n//           <p className=\"error\">{props.errors.password}</p>\n//         )}\n//         <Field component=\"select\" name=\"region\" className=\"sumbit-select\">\n//           <option>Select Region</option>\n//           <option value=\"eastcoast\">East Coast</option>\n//           <option value=\"westcoast\">West Coast</option>\n//           <option value=\"midwest\">Mid-West</option>\n//           <option value=\"south\">South</option>\n//         </Field>\n//         <label className=\"checkbox-container\">\n//           <Field type=\"checkbox\" name=\"terms\" checked={props.values.terms} />\n//           Terms of Service\n//           <span className=\"checkmark\" />\n//         </label>\n//         <Field\n//           component=\"textarea\"\n//           type=\"text\"\n//           name=\"medical\"\n//           placeholder='Add any medical conditions'\n//           checked={props.values.medical}\n//         />\n        \n//         <button type=\"submit\">Submit!</button>\n//       </Form>\n//       {user.map(user => (\n//         <ul key={user.id}>\n//           <li>Name: {user.name}</li>\n//           <li>Email: {user.email}</li>\n//           <li>New Password: {user.password}</li>\n//         </ul>\n//       ))}\n//     </div>\n//   );\n// };\n\n// // a component is a function that takes a prop param\n// // and returns JSX\n\n// // a HOC is a function that takes a component function as a param\n// // and returns a new component function\n\n// const mappingProps = props => {\n//   console.log(props);\n//   const userObjects = {\n//     name: props.name || \"\",\n//     email: props.email || \"\",\n//     password: props.password || \"\",\n//     terms: props.terms || true,\n//     medical: props.medical || \"\"\n//   };\n//   return userObjects;\n// };\n\n// const handleSubmit = (values, { setStatus }) => {\n//   console.log(\"submit test\");\n//   Axios.post(\"https://reqres.in/api/users/\", values)\n//     .then(res => {\n//       console.log(res);\n//       setStatus(res.data);\n//     })\n//     .catch(err => console.log(err));\n// };\n\n// // const yupSchema = Yup.object().shape({\n// //   name: Yup.string().requried(\"Please enter your name\"),\n// //   email: Yup.string().requried(\"Please enter your email\"),\n// //   password: Yup.string().requried(\"Please enter your password\")\n// // });\n\n// // const yupSchema = Yup.object().shape({\n// //   users: Yup.array()\n// //     .of(\n// //       Yup.object().shape({\n// //         name: Yup.string().requried(\"Please enter your name\"),\n// //         email: Yup.string().requried(\"Please enter your email\"),\n// //         password: Yup.string().requried(\"Please enter your password\"), // these constraints take precedence\n// //       })\n// //     )\n    \n// // });\n\n// const formikObj = {\n//   mappedProps: mappingProps,\n//   handledSubmit: handleSubmit,\n//   // validationSchema: yupSchema\n// };\n\n// const FinalFormHOC = withFormik(formikObj);\n// const FinalUserForm = FinalFormHOC(UserForms);\n\n// export default FinalUserForm;\n\n//deleteeeeeeeeeeeeeee below \nconst UserForms = props => {\n  const [animal, setAnimal] = useState([]);\n  useEffect(() => {\n    if (props.status) {\n      setAnimal([...animal, props.status]);\n    }\n    [animal];\n  });\n\n  // const handleChange = event => {\n  //   setAnimal({ ...animal, [event.target.name]: event.target.value });\n  // };\n\n  // const handleSubmit = event => {\n  //   event.preventDefault();\n  //   console.log(animal.species);\n  // };\n\n  //<Field /> subs for input\n\n  //Forms takes care of value and onChange key/values\n  // value={props.values.species}\n  // onChange={props.handleChange}\n\n  return (\n    <div className=\"animal-form\">\n      {/* <form onSubmit={event => handleSubmit(event)}> */}\n      <Form>\n        Species:\n        <Field type=\"text\" name=\"species\" placeholder=\"species\" />\n        {props.touched.species && props.errors.species && (\n          <p className=\"error\">{props.error.species}</p>\n        )}\n        <Field type=\"text\" name=\"size\" placeholder=\"size\" />\n        {props.touched.size && props.errors.size && (\n          <p className=\"error\">{props.error.size}</p>\n        )}\n        <Field component=\"select\" name=\"diet\" className=\"food-select\">\n          <option>Please Submit</option>\n          <option value=\"herbivore\">herbivore</option>\n          <option value=\"carnivore\">carnivore</option>\n          <option value=\"omnivore\">omnivore</option>\n        </Field>\n        <label className=\"checkbox-container\">\n          <Field\n            type=\"checkbox\"\n            name=\"vaccinations\"\n            checked={props.values.vaccinations}\n          />\n          vaccinations\n          <span className=\"checkmark\" />\n        </label>\n        <Field\n          component=\"textarea\"\n          type=\"text\"\n          name=\"notes\"\n          placeholder=\"notes\"\n        />\n        <button type=\"sumbit\">Submit!</button>\n        {/* </form> */}\n      </Form>\n      {animal.map(animal => {\n        <ul key={animal.id}>\n          <li>Species: {animal.species}</li>\n          <li>size: {animal.size}</li>\n          <li>Diet: {animal.diet}</li>\n        </ul>;\n      })}\n    </div>\n  );\n};\n\nconst myMapPropsToValues = props => {\n  const returnObj = {\n    species: props.species || \"\", //must match value={props.values. SPECIES} from input^\n    size: props.size || \"\",\n    diet: props.diet || \"\",\n    vaccinations: props.vaccinations || true,\n    notes: props.notes || \"\"\n  };\n  return returnObj;\n};\n//works with <Form /> so you dont need the above handleSubmit function ^^\n\n// Axios call from the server\nconst myHandleSubmit = (values, { setStatus }) => {\n  console.log(\"sumbit pressed ...sending...\");\n  Axios.post(\"https://reqres.in/api/users/\", values)\n    .then(res => {\n      console.log(res);\n      setStatus(res.data);\n    })\n    .catch(err => console.log(err));\n};\n\nconst yupSchema = Yup.object().shape({\n  species: Yup.string().required(\"please type a species\"),\n  size: Yup.string().required(\"please type a size\")\n});\n\nconst formikObj = {\n  mapPropsToValues: myMapPropsToValues,\n  handleSubmit: myHandleSubmit,\n  validationSchema: yupSchema\n};\n\nconst EnhancedFormHOC = withFormik(formikObj);\n// the component being passed must already be declared ie.(UserForms)\nconst FormikEnhancedAnimalForm = EnhancedFormHOC(UserForms);\n\nexport default FormikEnhancedAnimalForm;\n"]},"metadata":{},"sourceType":"module"}